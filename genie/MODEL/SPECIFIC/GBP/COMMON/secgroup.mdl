module[gbp]
{
    class[SecGroup;
          super=gbp/AccessBehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=secgroup;
                          member=name]
            }
        }
    }

    class[LocalSecGroup;
          super=gbp/SecGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
    }

    class[SecGroupSubject;
          super=gbp/AccessBehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=gbp/SecGroup]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=subject;
                          member=name]
            }
        }
    }

    class[LocalSecGroupSubject;
          super=gbp/SecGroupSubject;
          concrete]
    {
        contained
        {
            parent[class=gbp/LocalSecGroup]
        }
    }

    # DNS FQDN or Regex(only leading *)
    class[DnsName;
          super=policy/NamedDefinition;
          concrete]
    {
        contained
        {
            parent[class=gbp/SecGroupRule]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[SecGroupRule;
          super=gbp/Rule;
          concrete]
    {
        contained
        {
            parent[class=gbp/SecGroupSubject]
        }

        # Set of remote prefixes to which this rule applies.
        dependency[remoteAddress;
                   cardinality=many;
                   ]
        {
            to[class=gbp/Subnets;
                cardinality=many;
                ]
        }
    }

    class[LocalSecGroupRule;
          super=gbp/SecGroupRule;
          concrete]
    {
        contained
        {
            parent[class=gbp/LocalSecGroupSubject]
        }
        # Set of remote prefixes to which this rule applies.
        dependency[remoteAddress;
                   cardinality=many;
                   ]
        {
            to[class=gbp/LocalSubnets;
                cardinality=many;
                ]
        }
        dependency[classifier;
                   cardinality=many;
                   ]
        {
            to[class=gbpe/LocalL24Classifier;
                cardinality=many;
                ]
        }
        dependency[action;
                   cardinality=many;
                   ]
        {
            to[class=gbp/LocalAllowDenyAction;
                cardinality=many;
                ]
        }
        dependency[action;
                   cardinality=many;
                   ]
        {
            to[class=gbp/LocalLogAction;
                cardinality=many;
                ]
        }
    }
}
